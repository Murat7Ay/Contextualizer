@page "/handler-editor/{id?}"
@using Contextualizer.Studio.Services
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject IGitHubHandlerService GitHubService
@inject NavigationManager Navigation

<div class="container mx-auto p-4">
    @if (_loading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900"></div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="bg-white p-4 rounded-lg shadow">
                <h2 class="text-2xl font-bold mb-4">Handler Metadata</h2>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">ID</label>
                        <input type="text" @bind="_handler.Id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Name</label>
                        <input type="text" @bind="_handler.Name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea @bind="_handler.Description" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" rows="3"></textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Version</label>
                        <input type="text" @bind="_handler.Version" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Tags (comma separated)</label>
                        <input type="text" @bind="_tagsInput" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                    </div>
                </div>
            </div>

            <div class="bg-white p-4 rounded-lg shadow">
                <h2 class="text-2xl font-bold mb-4">Handler Configuration</h2>
                <div class="h-96 border rounded-md">
                    <StandaloneCodeEditor @ref="_editor" 
                                Id="handler-editor"
                                CssClass="h-full"
                                ConstructionOptions="EditorConstructionOptions" />
                </div>
            </div>
        </div>

        <div class="mt-4 flex justify-end space-x-2">
            <button class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300" @onclick="Cancel">
                Cancel
            </button>
            <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700" @onclick="SaveHandler">
                Save Handler
            </button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private HandlerInfo _handler = new();
    private string _tagsInput = "";
    private bool _loading = true;
    private StandaloneCodeEditor _editor;
    private string _editorContent = "{}";

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json",
            Theme = "vs-dark",
            Value = _editorContent,
            RoundedSelection = true,
            ScrollBeyondLastLine = false,
            ReadOnly = false,
            FontSize = 14
        };
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            try
            {
                var parts = Id.Split('/');
                if (parts.Length == 2)
                {
                    _handler = await GitHubService.GetHandlerDetailsAsync(parts[0], parts[1]);
                    _tagsInput = string.Join(", ", _handler.Tags);
                }
            }
            catch (Exception ex)
            {
                // Handle error
            }
        }
        else
        {
            _handler = new HandlerInfo
            {
                Id = "",
                Name = "",
                Version = "1.0.0",
                Tags = new List<string>(),
                Dependencies = new List<string>(),
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };
        }

        _loading = false;
    }

    private async Task SaveHandler()
    {
        try
        {
            _handler.Tags = _tagsInput.Split(',').Select(t => t.Trim()).ToList();
            _handler.UpdatedAt = DateTime.UtcNow;

            var content = await _editor.GetValue();

            if (string.IsNullOrEmpty(Id))
            {
                await GitHubService.CreateHandlerAsync(_handler, content);
            }
            else
            {
                var parts = Id.Split('/');
                await GitHubService.UpdateHandlerAsync(parts[0], parts[1], _handler, content);
            }

            Navigation.NavigateTo("/handlers");
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/handlers");
    }
} 